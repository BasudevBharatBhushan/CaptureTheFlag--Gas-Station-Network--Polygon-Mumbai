{
  "address": "0x8Bf1AA01C29b283Fb5a036ce687f36C8Ae7f0901",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currentHolder",
          "type": "address"
        }
      ],
      "name": "FlagCaptured",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "captureTheFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentHolder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed62029b5261ab0abd9bba0527b02785e347852e3b3313bfc3ab046167bacdb3",
  "receipt": {
    "to": null,
    "from": "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
    "contractAddress": "0x8Bf1AA01C29b283Fb5a036ce687f36C8Ae7f0901",
    "transactionIndex": 4,
    "gasUsed": "290729",
    "logsBloom": "0x
    "blockHash": "0xb50bd4562357e034e3667b936042ce45e80b1fd6d291abb16b112f81bdf4529e",
    "transactionHash": "0xed62029b5261ab0abd9bba0527b02785e347852e3b3313bfc3ab046167bacdb3",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 33801021,
        "transactionHash": "0xed62029b5261ab0abd9bba0527b02785e347852e3b3313bfc3ab046167bacdb3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000085b3db26424a88e7c1319e40a6324d64acf1ffa2",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000001f0d9efb905700000000000000000000000000000000000000000000000009822261c4f6beb01000000000000000000000000000000000000000000001d327faa90e8c5017152000000000000000000000000000000000000000000000000982035425fb2e591000000000000000000000000000000000000000000001d327fac81c2b4ba76c2",
        "logIndex": 13,
        "blockHash": "0xb50bd4562357e034e3667b936042ce45e80b1fd6d291abb16b112f81bdf4529e"
      }
    ],
    "blockNumber": 33801021,
    "cumulativeGasUsed": "726335",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB2b5841DBeF766d4b521221732F9B618fCf34A87"
  ],
  "numDeployments": 2,
  "solcInputHash": "314a93532a074a9d29d3f863ec776ac3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentHolder\",\"type\":\"address\"}],\"name\":\"FlagCaptured\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"captureTheFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTrustedForwarder()\":{\"returns\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CaptureTheFlag.sol\":\"CaptureTheFlag\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77b3307c570c582969ea5466f296898ab9fea1f8b61b30f1c73345fe047a89a9\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\",\"keccak256\":\"0xc762358681e3494519a5fff2f7e3f0f74f9c9f395f23b00cdfb45e0fb9ef8170\",\"license\":\"MIT\"},\"contracts/CaptureTheFlag.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier:MIT\\n */\\npragma solidity ^0.8.7;\\n\\nimport \\\"@opengsn/contracts/src/ERC2771Recipient.sol\\\";\\n\\n// contract CaptureTheFlag is BaseRelayRecipient {\\ncontract CaptureTheFlag is ERC2771Recipient {\\n    event FlagCaptured(address previousHolder, address currentHolder);\\n\\n    address public currentHolder = address(0);\\n\\n    constructor(address forwarder) {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    string public versionRecipient = \\\"3.0.0\\\";\\n\\n    function captureTheFlag() external {\\n        address previousHolder = currentHolder;\\n\\n        currentHolder = _msgSender();\\n\\n        emit FlagCaptured(previousHolder, currentHolder);\\n    }\\n}\\n\",\"keccak256\":\"0xae5ef08ea4fcb5da371af52f171b6941aed8fc03782b11d755bef58dd5791509\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600180546001600160a01b031916905560c060405260056080819052640332e302e360dc1b60a09081526100369160029190610083565b5034801561004357600080fd5b506040516104ee3803806104ee8339810160408190526100629161011c565b600080546001600160a01b0319166001600160a01b03831617905550610187565b82805461008f9061014c565b90600052602060002090601f0160209004810192826100b157600085556100f7565b82601f106100ca57805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f75782518255916020019190600101906100dc565b50610103929150610107565b5090565b5b808211156101035760008155600101610108565b60006020828403121561012e57600080fd5b81516001600160a01b038116811461014557600080fd5b9392505050565b600181811c9082168061016057607f821691505b6020821081141561018157634e487b7160e01b600052602260045260246000fd5b50919050565b610358806101966000396000f3fe608060405234801561001057600080fd5b50600436106100665760003560e01c8063486ff0cd11610050578063486ff0cd146100a5578063572b6c05146100ba578063ce1b815f146100ec57600080fd5b80624225b81461006b578063239e26f21461009b575b600080fd5b60015461007e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a36100fd565b005b6100ad610187565b6040516100929190610249565b6100dc6100c836600461029e565b6000546001600160a01b0391821691161490565b6040519015158152602001610092565b6000546001600160a01b031661007e565b6001546001600160a01b0316610111610215565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392831690811790915560408051928416835260208301919091527facc718a11fbc93a22905740808767480f9efd07b1c0b0128095790cd1440048d910160405180910390a150565b60028054610194906102ce565b80601f01602080910402602001604051908101604052809291908181526020018280546101c0906102ce565b801561020d5780601f106101e25761010080835404028352916020019161020d565b820191906000526020600020905b8154815290600101906020018083116101f057829003601f168201915b505050505081565b60006014361080159061023257506000546001600160a01b031633145b15610244575060131936013560601c90565b503390565b600060208083528351808285015260005b818110156102765785810183015185820160400152820161025a565b81811115610288576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156102b057600080fd5b81356001600160a01b03811681146102c757600080fd5b9392505050565b600181811c908216806102e257607f821691505b6020821081141561031c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea264697066735822122032d0c13d73a786815e87ec0b1dec61be51e53dcdafd9098ae9bab54e5b07d2f164736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100665760003560e01c8063486ff0cd11610050578063486ff0cd146100a5578063572b6c05146100ba578063ce1b815f146100ec57600080fd5b80624225b81461006b578063239e26f21461009b575b600080fd5b60015461007e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a36100fd565b005b6100ad610187565b6040516100929190610249565b6100dc6100c836600461029e565b6000546001600160a01b0391821691161490565b6040519015158152602001610092565b6000546001600160a01b031661007e565b6001546001600160a01b0316610111610215565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392831690811790915560408051928416835260208301919091527facc718a11fbc93a22905740808767480f9efd07b1c0b0128095790cd1440048d910160405180910390a150565b60028054610194906102ce565b80601f01602080910402602001604051908101604052809291908181526020018280546101c0906102ce565b801561020d5780601f106101e25761010080835404028352916020019161020d565b820191906000526020600020905b8154815290600101906020018083116101f057829003601f168201915b505050505081565b60006014361080159061023257506000546001600160a01b031633145b15610244575060131936013560601c90565b503390565b600060208083528351808285015260005b818110156102765785810183015185820160400152820161025a565b81811115610288576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156102b057600080fd5b81356001600160a01b03811681146102c757600080fd5b9392505050565b600181811c908216806102e257607f821691505b6020821081141561031c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea264697066735822122032d0c13d73a786815e87ec0b1dec61be51e53dcdafd9098ae9bab54e5b07d2f164736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTrustedForwarder()": {
        "returns": {
          "forwarder": "The address of the Forwarder contract that is being used."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The address of the Forwarder contract that is being used."
        },
        "returns": {
          "_0": "isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTrustedForwarder()": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."
      },
      "isTrustedForwarder(address)": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CaptureTheFlag.sol:CaptureTheFlag",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 143,
        "contract": "contracts/CaptureTheFlag.sol:CaptureTheFlag",
        "label": "currentHolder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "contracts/CaptureTheFlag.sol:CaptureTheFlag",
        "label": "versionRecipient",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}